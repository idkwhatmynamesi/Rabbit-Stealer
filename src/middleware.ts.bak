import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

function verifyToken(token: string): any {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch {
    return null;
  }
}

export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;

  // Public paths that don't require authentication
  const publicPaths = ['/login', '/register', '/api/auth/login', '/api/auth/register'];

  // Check if path is public
  const isPublicPath = publicPaths.some(publicPath => path.startsWith(publicPath));

  // Get token from cookie
  const token = request.cookies.get('auth-token')?.value;

  // Verify token
  const isValidToken = token ? verifyToken(token) : null;

  // Redirect to login if accessing protected route without valid token
  if (!isPublicPath && !isValidToken) {
    return NextResponse.redirect(new URL('/login', request.url));
  }

  // Redirect to home if accessing login/register with valid token
  if (isPublicPath && isValidToken && (path === '/login' || path === '/register')) {
    return NextResponse.redirect(new URL('/', request.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\..*|uploads).*)',
  ],
};
